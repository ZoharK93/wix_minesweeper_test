{"version":3,"sources":["Board.js","Game.js","Config.js","App.js","index.js"],"names":["Square","props","square","superman","revealed","showValue","value","className","onClick","flag","src","alt","Board","this","rows","squares","map","row","rowIndex","squareIndex","e","React","Component","MINE_VALUE","game_status","Game","columns","mines","i","push","Array","from","length","u","x","Math","floor","random","y","j","neighbour_mines","max","min","initBoard","state","flags","status","slice","squares_to_reveal","next_square","includes","reveal","setState","alert","change","shiftKey","handleClick","Config","changeValue","bind","event","target","name","max_value","type","defaultValue","onChange","onSubmit","renderInputField","toggleSuperman","getFieldValue","Number","App","createGame","supermanMode","game_number","preventDefault","key","checked","renderGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.455b1617.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Board.css';\r\n\r\nfunction Square(props) {\r\n    const square = props.square;\r\n    const superman = props.superman;\r\n    if(!square.revealed){\r\n        const showValue = superman ? square.value : null\r\n        return (<button \r\n            className={\"square \" + (superman ? \"superman\" : \"not-revealed\")} \r\n            onClick={props.onClick}>\r\n            {square.flag ? \r\n                <img src=\"./images/flag.png\" alt=\"flag\" /> : \r\n                showValue}\r\n        </button>);\r\n    }     \r\n\r\n    return (<button className=\"square revealed\">\r\n            {square.value}\r\n        </button>\r\n    );\r\n  }\r\n  \r\nclass Board extends React.Component {\r\n    render() {\r\n        const props = this.props;\r\n        var rows = props.squares.map(function(row, rowIndex){\r\n            return (<tr className=\"board-row\">\r\n                {row.map(function(square,squareIndex){\r\n                return (<td><Square\r\n                    square={square}\r\n                    onClick={(e) => props.onClick(e,rowIndex,squareIndex)}\r\n                    superman={props.superman}\r\n                    /></td>);\r\n                })}\r\n            </tr>\r\n        );})\r\n\r\n        return (\r\n            <div className=\"game-board\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board.js';\r\nimport './css/Game.css';\r\n\r\n \r\nconst MINE_VALUE = <img src=\"./images/mine.png\" alt=\"mine\" />;\r\nconst game_status = {\r\n    IN_PROGRESS: '',\r\n    WIN: 'You win!',\r\n    LOSE: 'You lose!' \r\n};\r\n\r\nfunction initBoard(rows, columns, mines){\r\n    var squares = []\r\n    for(let i = 0; i < rows; i++)\r\n        squares.push(Array.from({length: columns}, u => ({value: null, revealed: false, flag: false})));\r\n    \r\n    for(let i = 0; i < mines; i++){ \r\n        do {\r\n        var x = Math.floor(Math.random() * rows);\r\n        var y = Math.floor(Math.random() * columns);\r\n        } while(squares[x][y].value === MINE_VALUE); \r\n        squares[x][y].value = MINE_VALUE;\r\n    }\r\n\r\n    for(let i = 0; i < rows; i++){\r\n        for(let j = 0; j < columns; j++){\r\n            if(squares[i][j].value === MINE_VALUE) continue;\r\n            \r\n            var neighbour_mines = 0;\r\n            for(let x = Math.max(i - 1, 0); x <= Math.min(i + 1, rows - 1); x++){\r\n                for(let y = Math.max(j - 1, 0); y <= Math.min(j + 1, columns-1); y++){\r\n                    if(x === i && y === j) continue;\r\n                    if(squares[x][y].value === MINE_VALUE) neighbour_mines++;\r\n                }\r\n            }\r\n\r\n            if(neighbour_mines > 0) squares[i][j].value = neighbour_mines;\r\n        }\r\n    }\r\n\r\n    return squares;\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);       \r\n        var squares = initBoard(props.rows, props.columns, props.mines); \r\n        this.state = {\r\n            squares: squares,\r\n            flags: props.mines,\r\n            mines: props.mines,\r\n            superman: props.superman,\r\n            status: game_status.IN_PROGRESS\r\n        };\r\n    }\r\n\r\n    revealArea(i, j){\r\n        const squares = this.state.squares.slice();\r\n        var square = squares[i][j];\r\n        var squares_to_reveal = [square];\r\n        var n = 0;\r\n        while(n<squares_to_reveal.length){\r\n            var next_square = squares_to_reveal[n];\r\n            if(square.value === null){\r\n                for(let x = Math.max(i - 1, 0); x <= Math.min(i + 1, squares.length - 1); x++){\r\n                    for(let y = Math.max(j - 1, 0); y <= Math.min(j + 1, squares[i].length - 1); y++){\r\n                        if(squares_to_reveal.includes(next_square)) continue;\r\n                        this.reveal(x, y);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    reveal(i, j) {\r\n        const squares = this.state.squares.slice();\r\n        var square = squares[i][j];\r\n        if (square.flag) return;\r\n        square.revealed = true;\r\n  \r\n        if(square.value === null){\r\n            for(let x = Math.max(i - 1, 0); x <= Math.min(i + 1, squares.length - 1); x++){\r\n                for(let y = Math.max(j - 1, 0); y <= Math.min(j + 1, squares[i].length - 1); y++){\r\n                    if(squares[x][y].revealed) continue;\r\n                    this.reveal(x, y);\r\n                }\r\n            }\r\n        }\r\n  \r\n        this.setState({status: square.value === MINE_VALUE ? game_status.LOSE : game_status.IN_PROGRESS});\r\n    }\r\n  \r\n    flag(i, j) {\r\n        const square = this.state.squares.slice()[i][j];\r\n        var flags = this.state.flags;\r\n        var mines = this.state.mines;\r\n        \r\n        if (square.revealed) return;\r\n        if (!square.flag && flags <= 0){\r\n            alert(\"You have no remaining flags. Remove a flag before placing another one.\");\r\n            return;\r\n        }\r\n\r\n        square.flag = !square.flag;\r\n        const change = square.flag ? -1 : 1;\r\n        flags += change;\r\n        if(square.value === MINE_VALUE) mines += change;\r\n        \r\n        this.setState({flags: flags, \r\n            mines: mines,\r\n            status: mines === 0 ? game_status.WIN : game_status.IN_PROGRESS\r\n        });\r\n    }\r\n  \r\n    handleClick(e, i, j){\r\n        if(this.state.status !== game_status.IN_PROGRESS) return;\r\n        if(e.shiftKey){\r\n            this.flag(i, j);\r\n            return;\r\n        }\r\n        this.reveal(i, j);\r\n    }\r\n\r\n    render() {\r\n        if(this.props.superman !== this.state.superman)\r\n            this.setState({superman: this.props.superman});\r\n  \r\n        return (\r\n            <div className=\"game\">\r\n                Flags remaining: {this.state.flags}\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    onClick={(e, i, j) => this.handleClick(e, i, j)}\r\n                    superman={this.state.superman}\r\n                />\r\n                <div>{this.state.status}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport './css/Config.css'; \r\n\r\nclass Config extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.changeValue = this.changeValue.bind(this);\r\n        this.state = {\r\n            rows: props.rows,\r\n            columns: props.columns,\r\n            mines: props.mines\r\n        };\r\n    }\r\n\r\n    changeValue(event){\r\n        const target = event.target;    \r\n        this.setState({\r\n            [target.name]: target.value\r\n          });\r\n    }\r\n    \r\n    renderInputField(name,max_value){\r\n        return <input type=\"number\" name={name} min={1} max={max_value} defaultValue={this.state[name]} onChange={this.changeValue}/>\r\n    }\r\n\r\n    render(){\r\n        return (<div className=\"settings\">\r\n            <form onSubmit={this.props.onSubmit}>\r\n                Rows:\r\n                {this.renderInputField('rows',300)}\r\n                Columns:\r\n                {this.renderInputField('columns',300)}\r\n                Mines:\r\n                {this.renderInputField('mines',this.state.rows * this.state.columns)}\r\n                <input type=\"submit\" value=\"New Game\" />\r\n            </form>\r\n            <input type=\"checkbox\" onChange={this.props.toggleSuperman}/>\r\n            Superman mode\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Config;","import React from 'react';\nimport './css/App.css';\nimport Game from './Game.js';\nimport Config from './Config.js';\n\nfunction getFieldValue(target, name){\n  return Number(target[name].value);\n}\n\n// ========================================\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.createGame = this.createGame.bind(this);\n    this.supermanMode = this.supermanMode.bind(this);\n    this.state = {\n      game_number: 1,\n      rows: 10,\n      columns: 10,\n      mines: 10,\n      superman: false,\n    };\n  }\n\n  createGame(event){\n    event.preventDefault();\n    const target = event.target;\n    this.setState({\n      game_number: this.state.game_number+1,\n      rows: getFieldValue(target,'rows'),\n      columns: getFieldValue(target,'columns'),\n      mines: getFieldValue(target,'mines'), \n    });\n  }\n\n  renderGame(){\n    const state = this.state;\n    return (<Game \n      key={state.game_number}\n      rows={state.rows}\n      columns={state.columns}\n      mines={state.mines}\n      superman={state.superman}\n    />);\n  }\n\n  supermanMode(event){\n    this.setState({\n      superman: event.target.checked\n    });\n  }\n\n  render(){\n    const state = this.state;\n    return (\n      <div className=\"App\">\n        <Config\n          rows={state.rows}\n          columns={state.columns}\n          mines={state.mines}\n          onSubmit = {(e) => this.createGame(e)}\n          toggleSuperman = {(e) => this.supermanMode(e)}\n        />\n        {this.renderGame()}\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}